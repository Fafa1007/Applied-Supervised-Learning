# Question 1 - Modelling

```{r}
train <- read.csv("online_shopping_train.csv")
test <- read.csv("online_shopping_testing.csv")
valid <- read.csv("online_shopping_valid.csv")
head(train)
```

First convert categorical variables into factor type, stating for which features this was done.

```{r}
factor_cols <- c("Administrative", "Informational", "ProductRelated", "SpecialDay", "Month", "OperatingSystems", "Browser", "VisitorType", "Weekend", "Revenue")

scale_cols <- c("Administrative_Duration", "Informational_Duration", "ProductRelated_Duration","BounceRates", "ExitRates", "PageValues")

train[factor_cols] <- lapply(train[factor_cols], factor)
train[scale_cols] <- lapply(train[scale_cols], scale)
y_train <- train["Revenue"]
x_train <- train[, -16]

valid[factor_cols] <- lapply(valid[factor_cols], factor)
valid[scale_cols] <- lapply(valid[scale_cols], scale)
y_valid <- valid["Revenue"]
x_valid <- valid[,-16]

test[head(factor_cols,-1)] <- lapply(test[head(factor_cols,-1)], factor)
test[scale_cols] <- lapply(test[scale_cols], scale)
```

------------------------------------------------------------------------

# Logistic regression with a linear decision boundary.

Apply elastic-net regularization to this model, motivating for the choice of α and λ.

```{r}
library(tidyverse)
library(knitr)
library(broom)

# logistic regression model to the entire datase
log_mod1 <- glm(Revenue ~ ., family = binomial,data = train)
log_mod1 %>% 
  tidy() %>%
  kable(digits = 2, caption = 'Saturated logistic regression model fitted to the online shopping dataset')
```

```{r}
library(glmnet)
library(plotmo)
library(glmnetUtils)

elasticnet <- cva.glmnet(as.numeric(Revenue) ~ ., valid, alpha = seq(0, 1, 0.1))
plot(elasticnet, main ="Cross Validation Error as lambda increases for 
different fixed values of alpha")
```

```{r}
alphas <- elasticnet$alpha #Just extracting the alphas we specified
cv_mses <- sapply(elasticnet$modlist,
  function(mod) min(mod$cvm) #Across the list of models, extract the minimum CV MS
  )

lowest_mse <- min(cv_mses)
best_alpha <- alphas[which.min(cv_mses)]
print(paste("The lowest CV MSE is", lowest_mse))
print(paste("The Alpha corresponding to this minumum is", best_alpha))

plot(alphas, cv_mses, 'b', lwd = 2, pch = 16, col = 'navy', xlab = expression(alpha), ylab = 'CV MSE') #Scale is crucial, this is still very granular!
abline(v = best_alpha, lty = 3, col = 'red')
```

In other words,
